{"version":3,"file":"busy.service.js","sourceRoot":"","sources":["../../.tmp/busy/busy.service.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,UAAU,EAAE,sBAAsB;AAC3C,OAAO,EAAE,UAAU,EAAE,wBAAwB;AAC7C,OAAO,EAAE,QAAQ,EAAE,sBAAsB;AACzC,iCAAiC;;IAQ7B;QAAA,iBAKC;QAJG,IAAI,CAAC,cAAc,GAAG,IAAI,UAAU,CAAU,UAAC,QAAQ;YAC/C,KAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;SAChC,CACJ,CAAC,KAAK,EAAE,CAAC;KACb;;;;IAEM,0BAAI;;;;QACP,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChC;;;;;IAGE,0BAAI;;;;QACP,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACjC;;;gBAtBR,UAAU;;;;sBALX;;SAMa,WAAW","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport 'rxjs/add/operator/share';\n\n@Injectable()\nexport class BusyService {\n\n    public busyObservable: Observable<boolean>;\n    private busyObserver: Observer<boolean>;\n\n    constructor() {\n        this.busyObservable = new Observable<boolean>((observer) => {\n                this.busyObserver = observer;\n            }\n        ).share();\n    }\n\n    public show() {\n        if (this.busyObserver) {\n            this.busyObserver.next(true);\n        }\n    }\n\n    public hide() {\n        if (this.busyObserver) {\n            this.busyObserver.next(false);\n        }\n    }\n}\n"]}